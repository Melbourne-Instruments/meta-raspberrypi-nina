diff --git a/drivers/i2c/busses/i2c-bcm2835.c b/drivers/i2c/busses/i2c-bcm2835.c
index 9f4f4964a507..f36b9806bf27 100644
--- a/drivers/i2c/busses/i2c-bcm2835.c
+++ b/drivers/i2c/busses/i2c-bcm2835.c
@@ -202,6 +202,8 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	 * can't be greater than CDIV/2.
 	 */
 	fedl = max(divider / 16, 1u);
+	if (fedl == 0x1f)
+		fedl = 0x2f;
 
 	/*
 	 * Number of core clocks to wait after rising edge before
@@ -212,6 +214,7 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_DEL,
 			   (fedl << BCM2835_I2C_FEDL_SHIFT) |
 			   (redl << BCM2835_I2C_REDL_SHIFT));
+	printk(KERN_INFO "clk_bcm2835_i2c_set_rate: DEL reg %X", bcm2835_i2c_readl(div->i2c_dev, BCM2835_I2C_DEL));
 
 	/*
 	 * Set the clock stretch timeout to the SMBUs-recommended 35ms.
@@ -222,6 +225,7 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	    clk_tout = 35*rate/1000;
 
 	bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_CLKT, clk_tout);
+	//bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_CLKT, 0);
 
 	return 0;
 }
@@ -299,6 +303,7 @@ static void bcm2835_drain_rxfifo(struct bcm2835_i2c_dev *i2c_dev)
 	u32 val;
 
 	while (i2c_dev->msg_buf_remaining) {
+		//printk(KERN_INFO "bcm2835_drain_rxfifo remaining: %X",i2c_dev->msg_buf_remaining);
 		val = bcm2835_i2c_readl(i2c_dev, BCM2835_I2C_S);
 		if (!(val & BCM2835_I2C_S_RXD))
 			break;
@@ -381,16 +386,25 @@ static irqreturn_t bcm2835_i2c_isr(int this_irq, void *data)
 		goto complete;
 	}
 
-	if (val & BCM2835_I2C_S_DONE) {
+	if ((val & (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) == (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) {
+		printk(KERN_INFO "bcm2835_i2c_isr ERROR: %X %X",val,i2c_dev->msg_buf_remaining);
+	}
+
+	if ((val & (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) == BCM2835_I2C_S_DONE) {
 		if (!i2c_dev->curr_msg) {
-			dev_err(i2c_dev->dev, "Got unexpected interrupt (from firmware?)\n");
+			//dev_err(i2c_dev->dev, "Got unexpected interrupt (from firmware?)\n");
+			printk(KERN_INFO "Got unexpected interrupt (from firmware?): %X",val);
 		} else if (i2c_dev->curr_msg->flags & I2C_M_RD) {
+			//printk(KERN_INFO "About to bcm2835_drain_rxfifo...: %X %X",val,i2c_dev->msg_buf_remaining);
 			bcm2835_drain_rxfifo(i2c_dev);
 			val = bcm2835_i2c_readl(i2c_dev, BCM2835_I2C_S);
+			//printk(KERN_INFO "bcm2835_drain_rxfifo DONE: %X %X",val,i2c_dev->msg_buf_remaining);
 		}
 
-		if ((val & BCM2835_I2C_S_RXD) || i2c_dev->msg_buf_remaining)
-			i2c_dev->msg_err = BCM2835_I2C_S_LEN;
+		if ((val & BCM2835_I2C_S_RXD) || i2c_dev->msg_buf_remaining) {
+			printk(KERN_INFO "bcm2835_i2c_isr ERROR: %X %X",val,i2c_dev->msg_buf_remaining);
+			i2c_dev->msg_err = val | BCM2835_I2C_S_LEN;
+		}
 		else
 			i2c_dev->msg_err = 0;
 		goto complete;
@@ -486,6 +500,7 @@ static int bcm2835_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[],
 	if (i2c_dev->msg_err & BCM2835_I2C_S_ERR)
 		return -EREMOTEIO;
 
+	printk(KERN_INFO "i2c transfer failed: %X", i2c_dev->msg_err);
 	return -EIO;
 }
 
@@ -588,6 +603,7 @@ static int bcm2835_i2c_probe(struct platform_device *pdev)
 	adap->dev.of_node = pdev->dev.of_node;
 	adap->quirks = of_device_get_match_data(&pdev->dev);
 
+	bcm2835_i2c_writel(i2c_dev, BCM2835_I2C_CLKT, 0);
 	bcm2835_i2c_writel(i2c_dev, BCM2835_I2C_C, 0);
 
 	ret = i2c_add_adapter(adap);
